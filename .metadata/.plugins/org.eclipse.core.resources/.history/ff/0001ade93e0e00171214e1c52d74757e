package textExcel;

// Update this file with your own code.

public class Spreadsheet implements Grid {
	
	private Cell[][] setUp = new Cell[20][12];
	
	public Spreadsheet() {
		for (int i = 0; i < 20; i++) {
			for (int j = 0; j < 12; j++) {
				setUp[i][j] = new EmptyCell();
			}
		}
	}
	
	@Override
	public String processCommand(String command) {
		if (command.equals("")) {
			return command;
		}
		
		String[] breakUp = command.split(" ");
		if (breakUp[0].toLowerCase().equals("clear")) {
			if (breakUp.length == 1) {
				for (int i = 0; i < 20; i++) {
					for (int j = 0; j < 12; j++) {
						setUp[i][j] = new EmptyCell();
					}
				}
			} else {
				SpreadsheetLocation specLoc = new SpreadsheetLocation(breakUp[1]);
				setUp[specLoc.getRow()][specLoc.getCol()] = new EmptyCell();
			}
			return getGridText();
		}
				
				
		/*		String[] splitCommand=command.split(" ");
		//for clearing whole spreadsheet or individual cell
		if(splitCommand[0].toUpperCase().equals("CLEAR")){
		//for loop to make everything empty cell
			if(splitCommand.length==1){
				for(int i=0;i<getRows();i++){
					for(int j=0;j<getCols();j++){
						cells[i][j]=new EmptyCell();
					}
				}
			}else{		//only one designated cell gets cleared
				splitCommand[1]=splitCommand[1].toUpperCase(); //use .toUpperCase() because splitCommand[1] might be a1, which is lower case
				SpreadsheetLocation low= new SpreadsheetLocation(splitCommand[1]);
				cells[low.getRow()][low.getCol()]=new EmptyCell();
			}
			return getGridText();
		} */
	}

	@Override
	public int getRows() {
		// TODO Auto-generated method stub
		return 20;
	}

	@Override
	public int getCols() {
		// TODO Auto-generated method stub
		return 12;
	}

	@Override
	public Cell getCell(Location loc) {
		// TODO Auto-generated method stub
		;
	}

	@Override
	public String getGridText() {
		// TODO Auto-generated method stub
		String grid = "   |";
		char colLet = 'A';
		int rowNum = 1;
		for (int i = 0; i < 12; i++) {    //creates the first header line
			grid += colLet + "         |";
			colLet++;
		}
		grid = grid + "\n";
		for (int j = 0; j < 20; j++) {
			if (j < 9) {
				grid += rowNum + "  |";
			} else {
				grid += rowNum + " |";
			}
			for (int z = 0; z < 12; z++) {
				grid += setUp[j][z].abbreviatedCellText() + "|"; 
			}
			rowNum++;
			grid += "\n";
		}
		return grid;
	}
			
}
